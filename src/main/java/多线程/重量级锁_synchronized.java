package 多线程;

public class 重量级锁_synchronized {
}
/**
 *      synchronized 是一种重量级锁
 *      有三种应用方式
 *          1.应用到实例方法身上 锁住的是this
 *          2.应用到静态方法身上 锁住的是class
 *          3.应用到代码块身上 自定义锁对象
 *      在虚拟机层面上的表示：
 *          2个指令配合使用
 *              monitorenter
 *              monitorexit
 *          这两个指令配合构成了一个监视器
 *          这个监视器的作用就是同一时刻只能有一个线程访问
 *          锁的信息都储存在对象头中，详解看对象模型
 *      synchronized在1.6版本后进行了优化
 *          能尽量不使用监视器 就不使用
 *          1.无锁 进行逃逸分析 这个变量在这个方法内部使用 不会造成线程不安全
 *          2.偏向锁 记录上次使用这个锁的是谁 这回还是他 不用进行同步操作
 *          3.轻量级锁 通过cas竞争锁
 *          4.锁粗化 在for循环里面写锁 可以把锁直接扩大到for循环外面更合适
 *
 *
 * */